Я создаю приложение для управления гопро камерами через юсб интерфейс. Приложение долно быть портабл и работать на любой машине без необходимости что либо доустанавливать. Должно вмещать все файлы которые нужно для работы приложения.
во всех файлах все должно быть на английском.
Основные файлы:
1. Gopro_Gui_interfase_Pyqt5.py - основной файл приложения
2. status_of_cameras_GUI.py - основной файл управления записью видео и связанные с ним файлы:
- goprolist_usb_activate_time_sync_record.py
- stop_record.py

всю остальную структуру проекта используем как есть, не нужно переименовывать файлы и сортировать поткаталогам. 
Предлагай самые прогрессивные методы создания портабл приложения.

Всегда советуй мне какую информацию добавить в правила- в этот документ.
Если тебе не до конца понятятны эти правила, то всегда спрашивай пользователя за дополнительными пояснениями.
Если ты считаешь, что более правильно сделать не так как я попросил или предложил, то всегда предлагай альтернативные варианты. Так как ддя меня важно сделать максимально правильно и современно с точки зрения кода и функционала.

используем python 3.11
PyQt5==5.15.9
requests==2.31.0
zeroconf==0.131.0
pyinstaller==6.3.0
humanize==4.11.0
aiohttp==3.9.1

C:\!AndriiShramko\inventions\SDKGOPROShramko\
├── build_env\                              # Каталог для сборки
└── GoProControl\
    └── api\
        └── v2\
            └── v38\                        # Основной каталог с исходным кодом
                ├── Gopro_Gui_interfase_Pyqt5.py    # Основной GUI файл
                ├── status_of_cameras_GUI.py         # GUI для мониторинга камер
                ├── icon.ico                         # Иконка приложения
                ├── camera_cache.json                # Кэш камер
                ├── prime_camera_sn.py               # Серийный номер основной камеры
                ├── goprolist_and_start_usb.py      # Управление USB
                ├── read_and_write_all_settings_from_prime_to_other.py
                ├── copy_to_pc_and_scene_sorting.py
                ├── copy_to_pc.py
                ├── sleep.py
                ├── Turn_Off_Cameras.py
                ├── format_sd.py
                ├── sync_and_record.py
                ├── date_time_sync.py
                ├── recording.py
                ├── camera_orientation_lock.py
                ├── Gopro_Gui_Interface.py
                ├── goprolist_and_start_usb_sync_all_settings_date_time.py
                ├── goprolist_usb_activate_time_sync.py
                ├── goprolist_usb_activate_time_sync_record.py
                ├── set_preset_0.py
                ├── set_video_mode.py
                ├── status_of_cameras.py
                ├── stop_record.py
                └── ico\                            # Каталог с иконками
                    └─ a2d48c62-b5d0-4da1-b944-ff767a22f643.jpg
                    └─ icon.ico

1. Версия Python и зависимости должны быть зафиксированы для обеспечения воспроизводимости сборки
2. Все пути к файлам должны быть относительными для обеспечения портативности
3. Все временные файлы должны создаваться в подкаталоге приложения
4. Конфигурационные файлы должны храниться в подкаталоге data/
5. Логи должны писаться в подкаталог logs/
6. Использовать Poetry для управления зависимостями
7. Использовать PyInstaller для создания портативной версии
8. Все ресурсы (иконки, конфиги) должны быть включены в сборку
9. Все зависимые скрипты должны быть включены в сборку
10. Все пути к ресурсам должны быть относительными от корня приложения
11. Логи и кэш должны создаваться в соответствующих подкаталогах
12. Приложение должно корректно определять пути в скомпилированной версии
13. Все внешние процессы должны запускаться с корректными путями
14. Добавить обработку ошибок при отсутствии необходимых файлов
15. Добавить проверку наличия всех зависимостей при запуске
16.utils.py обЩий модуль с функциями для работы с путями
17. Hidden Imports для PyInstaller:
17. Hidden Imports для PyInstaller:
- Все внутренние модули zeroconf должны быть явно указаны:
  - zeroconf._utils.ipaddress
  - zeroconf._services.info
  - zeroconf._core
  - zeroconf._engine
  - zeroconf._listener
  - zeroconf._handlers
  - zeroconf._handlers.answers
  - zeroconf._handlers.browser
  - zeroconf._handlers.cache
  - zeroconf._handlers.incoming
  - zeroconf._handlers.outgoing
  - zeroconf._handlers.query
  - zeroconf._handlers.record_manager
  - zeroconf._updates
  - zeroconf._services.browser
  - zeroconf._services.registry
  - zeroconf._services.info
  - zeroconf._utils
  - zeroconf._utils.name
  - zeroconf._utils.time
  - zeroconf._utils.net
18. Добавляь отсутствующие модули в hidden imports
19. Если наступил этап компиляции экзе файла, то всегда давай мне код, который запустит эту компиляцию. Одной строчкой.
20. При кмпиляции с использованием zeroconf:
- Всегда включать полный список подмодулей zeroconf
- Проверять лог ошибок импорта после компиляции
- При появлении новых ошибок импорта добавлять недостающие подмодули
- Не удалять и не изменять существующие импорты подмодулей
- Включать все подмодули handlers:
  * zeroconf._handlers.answers
  * zeroconf._handlers.browser
  * zeroconf._handlers.cache
  * zeroconf._handlers.incoming
  * zeroconf._handlers.outgoing
  * zeroconf._handlers.query
  * zeroconf._handlers.record_manager
- Включать все подмодули services:
  * zeroconf._services.browser
  * zeroconf._services.registry
  * zeroconf._services.info
- Включать все подмодули utils:
  * zeroconf._utils.name
  * zeroconf._utils.time
  * zeroconf._utils.net

21. Проверку существования всех зависимых скриптов перед их запуском Проверку всех косвнных зависимостей при запуске
22. Механизм восстановления состояния при сбое любого из скриптов
23. Механизм обработки ошибок при отсутствии любого из вспомогательных файлов
прежде чем предлагать ответ, вспомни все взаимосвязи файлов в нашем каталоге, что бы не пропустить никаких файлов, которые будут косвенно нужны для моих главных файлов.


для сборки используй ту же дирректорию но в отдельную папку build_env
отвечвй только на русском языке.
Сблюдай:
Коррекную работу с путями в скомпилированной версии
Единый формат логирования
Более надежную обработку ошибок
Правильную работу с кэшем камер
Совместимость с остальными модулями приложения

24. Правила для сборки в PyInstaller:
- Все пути к файлам должны быть абсолютными или относительными от текущей директории
- Перед сборкой проверять существование всех директорий и файлов
- Создавать необходимые директории перед сборкой
- Проверять структуру проекта перед сборкой
- Проверять дублирование путей в параметрах сборки
- Использовать абсолютные пути при копировании файлов
- Проверять корректность путей в параметрах --add-data
- Избегать вложенных путей build_env внутри build_env
- Использовать --onefile для создания единого exe файла
- Использовать --runtime-tmpdir для контроля распаковки
- Использовать --collect-all для автоматического сбора зависимостей
- Добавлять данные через --add-binary для корректной упаковки
- При использовании --onefile не создавать дополнительные директории в dist
- При использовании --onefile все ресурсы должны быть добавлены через --add-binary
- Временная директория для распаковки должна создаваться в текущей папке
- Проверять успешность создания временной директории при запуске

25. Структура каталогов для сборки:
- build_env/
    ├── build/          # Временные файлы сборки
    ├── dist/           # Готовая сборка
    └── data/           # Данные приложения
- Создавать структуру каталогов перед сборкой

26. Проверка путей перед сборкой:
- Проверять существование всех исходных файлов
- Проверяь права доступа к каталогам
- Создавать отсутствующие каталоги
- Копировать необходимые файлы в каталоги сборки

27. Правила работы с путями:
- Использовать Path.resolve() для получения абсолютных путей
- Проверять существование путей перед использованием
- Использовать ��орректные разделители для текущей ОС
- Избегать дублирования частей путей

28. Проверки перед сборкой:
- Валидация всех путей в параметрах сборки
- Проверка отсутствия конфликтов путей
- Проверка дотупности всех необходимых файлов
- Логирование всех операций с путями

29. Правила для модулей с подмодулями:
- Не удалять существующие импорты подмодулей
- Проверять все зависимости модуля перед удалением импортов
- При ошибках импорта возвращать удаленные импорты
- Тестровать работу всех функций после изменения импортов

30. Правила для вспомогательных скриптов:
- Каждый скрипт должен иметь функцию main() для запуска из GUI
- Функция main() должна возвращать True/False для индикации успеха
- Функция main() должна содержать всю логику работы скрипта
- В if __name__ == "__main__": должен быть вызов main()
- Все вспомогательные функции должны быть внутри скрипта
- Логирование должно быть единообразным во всех скриптах

31. Правила для работы с файлами данных:
- Все файлы данных должны создаваться автоматически при первом запуске
- Файлы должны иметь корректную структуру по умолчанию
- При отсутствии файлов должно быть корректное логирование
- Проверять права на запись перед создание�� файлов
- Обрабатывать ошибки доступа к файлам
- Создавать резервные копии важных файлов данных
- В скомпилированной версии data директория должна создаваться рядом с exe
- Проверять права на создание директорий и файлов
- Логировать все операции с файловой системой
- При отсутствии файлов создавать их с дефолтной структурой
- Использовать корректные пути в зависимости от режима запуска (frozen/development)

32. Правила для работы с API GoPro:
- Использовать базовый URL для всех запросов: http://{camera_ip}:8080/gp/gpControl/
- Основные эндпоинты:
  * /gp/gpControl/info - получение информации о камере
  * /gp/gpControl/status - получение состояния камеры
  * /gp/gpControl/setting - установка настроек камеры
- Обязательно обрабатывать ошибки при запросах к API
- Добавлять таймаут для всех запросов (рекомендуется 5 секунд)
- Логировать все ответы от API для отладки
- При получении ошибки 403 проверять поддерживаемые настройки для модели камеры
- Сохранять информацию о модели и прошивке камеры для валидации настроек
- Проверять статус камеры перед отправкой команд
- Использовать корректные значения параметров согласно документации API
- При работе с несколькими камерами учитывать их индивидуальные особенности
- Кэшировать информацию о камерах для оптимизации запросов
- Обновлять кэш при изменении состояния камер
- Синхронизировать настройки между камерами только после проверки совместимости

